# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'first_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtGui import QPixmap, QImage
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot, QObject
from pdf_reader import PDFHandler
from PIL.ImageQt import ImageQt
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog, QFontDialog
from pathlib import Path
import re
import copy
import json
import os

ui2 = None


class GirisEkrani(object):
    def setupUi(self, MainWindow):
        self.mw = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(878, 747)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 1, 2, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 0, 1, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 0, 3, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setText("")
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 2, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 3, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        ##############################################################

        self.file_path = None
        file_p = self.file_path
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton_3.clicked.connect(self.clicked_dosyaSec)
        self.pushButton.clicked.connect(self.clicked_once)
        self.pushButton_2.clicked.connect(self.clicked_sonra)

    def render_page(self):
        pix = self.pdf.toImage()
        image = QImage(pix.samples,
                       pix.width, pix.height,
                       pix.stride,
                       QImage.Format_RGB888)

        self.label.setPixmap(QPixmap.fromImage(image))
        self.label_2.setText("Sayfa: " + str(self.pdf.current_page + 1))

    def clicked_once(self):
        self.pdf.prevPage()
        self.render_page()

    def clicked_sonra(self):
        self.pdf.nextPage()
        self.render_page()

    def check_file(self):
        file_name = str(os.path.basename(self.file_path)).split(".")[0] + ".json"
        return file_name in os.listdir('./')

    def clicked_dosyaSec(self):

        if self.file_path is None:
            options = QFileDialog.Options()
            fname = QFileDialog.getOpenFileName(QtWidgets.QMainWindow(), "QFileDialog.getOpenFileName()", "",
                                                "PDF Files (*.pdf)", options=options)
            self.pushButton_3.setText("Sayfayı Seç")
            self.file_path = fname[0]
            if not self.check_file():
                self.pdf = PDFHandler(self.file_path)
                self.render_page()
            ## Dosya varsa yapılacak işlemler
        else:
            ui2.setupUi(self.pdf)
            ui2.show()
            self.mw.hide()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Select where to start"))
        self.pushButton_3.setText(_translate("MainWindow", "Dosya Seç"))
        self.pushButton.setText(_translate("MainWindow", "Önceki Sayfa"))
        self.pushButton_2.setText(_translate("MainWindow", "Sonraki Sayfa"))
        self.label_2.setText(_translate("MainWindow", "Sayfa:"))


class EtiketlemeEkrani(object):
    def __init__(self, MainWindow):
        self.MainWindow = MainWindow

    def show(self):
        self.MainWindow.show()

    def setupUi(self, pdf):
        MainWindow = self.MainWindow
        self.pdf = pdf
        self.file_path = pdf.name
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(879, 418)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")

        self.plainTextEdit_cumle = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_cumle.setObjectName("plainTextEdit_cumle")
        self.gridLayout.addWidget(self.plainTextEdit_cumle, 1, 1, 1, 5)

        self.pushButton_geri = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_geri.setObjectName("pushButton_geri")
        self.gridLayout.addWidget(self.pushButton_geri, 1, 0, 1, 1)
        self.pushButton_geri.clicked.connect(self.clicked_geri)

        self.label_blank1 = QtWidgets.QLabel(self.centralwidget)
        self.label_blank1.setText("")
        self.label_blank1.setObjectName("label_blank1")
        self.gridLayout.addWidget(self.label_blank1, 0, 1, 1, 5)
        self.label_blank0 = QtWidgets.QLabel(self.centralwidget)
        self.label_blank0.setText("")
        self.label_blank0.setObjectName("label_blank0")
        self.gridLayout.addWidget(self.label_blank0, 2, 1, 1, 5)
        with open("labels.json", "r", encoding='utf8') as f:
            d = json.loads(f.read())
            duygular = d["labels"]
            split_pattern = d["split_pattern"]
        _translate = QtCore.QCoreApplication.translate
        self.pushButton_geri.setText(_translate("MainWindow", "Geri"))
        for idx, duygu in enumerate(duygular):
            # print(idx, duygu)
            button = QtWidgets.QPushButton(self.centralwidget)
            button.setObjectName(duygu + "_button")
            button.clicked.connect(lambda a, d=duygu: self.save_and_next(d))
            button.setText(_translate("MainWindow", duygu))
            self.gridLayout.addWidget(button, idx // 7 + 3, idx % 7, 1, 1)

        MainWindow.setCentralWidget(self.centralwidget)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.handle_pdf(pdf, split_pattern)

    def handle_pdf(self, pdf, pattern=r"\. |\? |\! |\.\.\. "):
        self.index = 0
        text = pdf.toText()
        self.sentences = re.split(pattern, text)

        terminators = re.findall(pattern, text)
        print(terminators[:10], len(terminators))
        for idx, term in enumerate(terminators):
            self.sentences[idx] += term
        # for sentence in list(self.sentences):
        #     if len(sentence.replace(" ", "").replace("\n", "")) < 1:
        #         self.sentences.remove(sentence)
        #         print(sentence)

        will_delete = []
        for idx, sentence in enumerate(self.sentences):
            if len(sentence.replace(" ", "").replace("\n", "")) < 1:
                will_delete.append(idx)
        print(len(self.sentences))
        i = 0
        for idx in will_delete:
            print(idx)
            self.sentences.pop(idx - i)
            i += 1
        self.original_sentences = self.sentences.copy()
        self.num_of_sentences = len(self.sentences)

        self.labels = [None] * self.num_of_sentences
        print(self.num_of_sentences)
        self.plainTextEdit_cumle.setPlainText(self.sentences[self.index])

    def show_next_sentence(self):
        if self.num_of_sentences > self.index:
            self.index += 1
            self.plainTextEdit_cumle.setPlainText(self.sentences[self.index])

    def show_previous_sentence(self):
        if self.index > 0:
            self.index -= 1
            self.plainTextEdit_cumle.setPlainText(self.sentences[self.index])

    def save_label(self, label):
        self.labels[self.index] = label
        self.sentences[self.index] = self.plainTextEdit_cumle.toPlainText()
        self.save_to_file()

    def save_and_next(self, val):
        print(val)
        self.save_label(val)
        self.show_next_sentence()

    def clicked_geri(self):
        print("geri")
        self.show_previous_sentence()

    def save_to_file(self):
        with open(self.pdf.name.split(".")[0] + ".json", "w+", encoding='utf8') as f:
            data = []
            for label, sentence, original_sentence in zip(self.labels, self.sentences, self.original_sentences):
                data.append({
                    "original_sentence": original_sentence,
                    "sentence": sentence,
                    "label": label
                })
            json.dump(data, f, ensure_ascii=False)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = GirisEkrani()
    ui.setupUi(MainWindow)

    mw2 = QtWidgets.QMainWindow()
    ui2 = EtiketlemeEkrani(mw2)

    MainWindow.show()
    sys.exit(app.exec_())
